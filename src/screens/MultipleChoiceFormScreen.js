import React, { useState, useEffect } from "react";
import { View, Text, Button, Alert, ScrollView } from "react-native";
import save_test_score from "../services/firestore/save_test_score"
import load_test from "../services/firestore/load_test";
import load_test_title from "../services/firestore/load_test_title";

const MultipleChoiceForm = () => {
  const [multipleChoiceQuestions, setMultipleChoiceQuestions] = useState([]);
  const [title, setTitle] = useState("");


  useEffect(() => {
    const fetchData = async () => {
      const question = await load_test("oCA2gAV8NVIQpx6z8Ed1");
      const test_title = await load_test_title("oCA2gAV8NVIQpx6z8Ed1");
      setTitle(test_title);
      setMultipleChoiceQuestions(question);
    };
    fetchData();
    console.log(111, title)
    console.log(222, multipleChoiceQuestions)
  }, []);



  // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Multiple Choice) 
  const multipleChoiceQuestions_old = [
    {
      question: "1. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£?",
      choices: ["RAM", "CPU", "HDD", "Power Supply"],
      correctAnswer: "HDD",
    },
    {
      question: "2. ‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£?",
      choices: ["Microsoft Word", "Windows", "Photoshop", "Google Chrome"],
      correctAnswer: "Windows",
    },
    {
      question: "3. ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÉ‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô?",
      choices: ["RAM", "HDD", "SSD", "Power Supply"],
      correctAnswer: "SSD",
    },
    {
      question: "4. ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå?",
      choices: ["Python", "HTML", "C++", "Java"],
      correctAnswer: "HTML",
    },
    {
      question: "5. ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û?",
      choices: [".exe", ".mp3", ".jpg", ".txt"],
      correctAnswer: ".jpg",
    },
  ];

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const [multipleChoiceAnswers, setMultipleChoiceAnswers] = useState(
    Array(multipleChoiceQuestions.length).fill("")
  );
  const [score, setScore] = useState(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const handleSubmit = async () => {
    let totalScore = 0;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    multipleChoiceAnswers.forEach((answer, index) => {
      if (answer === multipleChoiceQuestions[index].correctAnswer) {
        totalScore += 1;
      }
    });

    setScore(totalScore);

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
    setMultipleChoiceAnswers(Array(multipleChoiceQuestions.length).fill(""));

    const randomNumber = Math.floor((Math.random() * 100) + 1);
    const randNum = Math.floor((Math.random() * 3) + 1)
    await save_test_score(totalScore, randomNumber.toString(), randomNumber.toString(), randNum.toString());

    Alert.alert(`‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ${totalScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏à‡∏≤‡∏Å ${multipleChoiceQuestions.length} ‡∏Ç‡πâ‡∏≠`);
  };

  return (
    <ScrollView contentContainerStyle={{ padding: 20, backgroundColor: '#f7fafc' }}>
      <View style={{ alignItems: 'center', marginBottom: 20 }}>
        <Text style={{ fontSize: 24, fontWeight: 'bold', marginBottom: 0 }}>{title.title}</Text>
        <Text style={{ fontSize: 18, fontWeight: '', marginBottom: 20 }}>{title.Description}</Text>

        {/* ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
        <View style={{ width: '100%' }}>
          {multipleChoiceQuestions.map((item, index) => (
            <View key={index} style={{ marginBottom: 20 }}>
              <Text style={{ fontSize: 16, fontWeight: '600', marginBottom: 10 }}>{item.question}</Text>
              {item.choices.map((choice, choiceIndex) => (
                <View key={choiceIndex} style={{ marginBottom: 10 }}>
                  <Button
                    title={choice}
                    onPress={() => {
                      const newAnswers = [...multipleChoiceAnswers];
                      newAnswers[index] = choice;
                      setMultipleChoiceAnswers(newAnswers);
                    }}
                    color={multipleChoiceAnswers[index] === choice ? "#4CAF50" : "#2196F3"}
                  />
                </View>
              ))}
            </View>
          ))}
        </View>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        <Button
          title="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
          onPress={handleSubmit}
          color="#007bff"
        />

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
        {score !== null && (
          <View style={{ marginTop: 20, padding: 10, backgroundColor: '#f0f4f8', borderRadius: 8 }}>
            <Text style={{ fontSize: 16, fontWeight: '600' }}>
              üéØ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: <Text style={{ color: '#1d4ed8' }}>{score}</Text> / {multipleChoiceQuestions.length} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ö
            </Text>
          </View>
        )}
      </View>
    </ScrollView>
  );
};

export default MultipleChoiceForm;
